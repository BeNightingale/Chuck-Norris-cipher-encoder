type: edu
files:
- name: src/chucknorris/Main.java
  visible: true
  text: |-
    package chucknorris;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ChuckNorrisTest.java
  visible: false
  text: |-
    import org.assertj.swing.util.Pair;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    public class ChuckNorrisTest extends StageTest {
      class Case{
        String input;
        String result;
        String invert;
        Case(String input, String result, String invert){
          this.input=input;
          this.result=result;
          this.invert=invert;
        }
      }
      Object[] test_data(){
        String ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
        List<String> list = new ArrayList<>(Arrays.asList(ascii.split("")));
        list.addAll(Arrays.asList("greetings!",
                "hello world!",
                ascii));
        List<Case> r = new ArrayList<>();
        for(String s : list){
          String code = "";
          String result_inv = "";
          for (int i=0;i<s.length();i++){
            String result = Integer.toBinaryString(s.charAt(i));
            String resultWithPadding = String.format("%7s", result).replaceAll(" ","0");
            code = code.concat(resultWithPadding);
          }
          for(int i=0;i<code.length()/7;i++){
            String tmp = code.substring(i*7,(i+1)*7).replace('0', '2').replace('1', '0').replace('2', '1');
            char c =  (char)Integer.parseInt(tmp,2);
            result_inv = result_inv.concat(String.valueOf(c));
          }
          String result="";
          char x=code.charAt(0);
          int start=0;
          for(int i=1;i<code.length();i++){
            if(code.charAt(i)!=x){
              result = result.concat(x=='1'?"0 ":"00 ").concat("0".repeat(i-start)+" ");
              x=code.charAt(i);
              start=i;
            }
          }
          result = result.concat(x=='1'?"0 ":"00 ").concat("0".repeat(code.length()-start)+" ");

          r.add(new Case(result,s,result_inv));
        }
        return r.toArray();
      }

      @DynamicTest(data = "test_data")
      CheckResult test(Case input_case) {
        TestedProgram pr = new TestedProgram();
        String output = pr.start().strip().toLowerCase();
        List<String> list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));

        if(list.size()!=1 || !list.get(0).contains("input")){
          return CheckResult.wrong("When the program just started, output should contain exactly 1 non-empty line, " +
                  "containing \"input\" substring as it shown in the example, followed by an input");
        }
        output = pr.execute(input_case.input);
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=2){
          return CheckResult.wrong("When the user has entered a string, there should be printed exactly 2 " +
                  "non-empty lines");
        }
        if(!list.get(0).toLowerCase().contains("result")){
          return CheckResult.wrong("When the user has entered a string, the first line of the output " +
                  "should contain \"result\" substring");
        }
        if(list.get(1).equals(input_case.invert)){
          return CheckResult.wrong("Input string was not decoded correctly, in this case the reason might be that you've " +
                  "decoded '0' sequence with first block \"0\" and '1' sequence with first block \"00\", so the decoded " +
                  "string is \"inverted\"");
        }
        if(!list.get(1).equals(input_case.result)){
          return CheckResult.wrong("Input string was not decoded correctly.");
        }

        return CheckResult.correct();
      }
    }
  learner_created: false
- name: src/chucknorris/IOUtil.java
  visible: true
  text: |
    package chucknorris;

    import java.util.Scanner;

    public class IOUtil {

        private IOUtil() {
            // nothing
        }

        public static String scanInput() {
            System.out.println("Input string:");
            Scanner scanner = new Scanner(System.in);
            return scanner.nextLine();
        }

        public static void showConvertedResult(String userInput) {
            System.out.println("The result:");
            System.out.println(Parser.encryptByChuckNorrisCipher(userInput));
        }
    }
  learner_created: true
- name: src/chucknorris/Parser.java
  visible: true
  text: |
    package chucknorris;

    import java.util.ArrayList;
    import java.util.List;

    public class Parser {

        private Parser() {
            // do nothing
        }

        /**
         * Method converts a String object into a list - its elements are chars of input converted to binary
         * and completed with zeroes at the beginning when representation is too short (has less than 7 characters).
         * This list is concatenated into one String object which is later encrypted: converted into zeroes and spaces.
         *
         * @param input a String which user wants to encrypt
         * @return encrypted String
         */

        public static String encryptByChuckNorrisCipher(String input) {
            final List<String> binary7sList = convertStringIntoBinary7sList(input);
            final String binariesConcatenated = String.join("", binary7sList);
            return parseBinariesToChuckBlock(binariesConcatenated);
        }

        private static List<String> convertStringIntoBinary7sList(String input) {
            final List<String> binary7sList = new ArrayList<>();
            input.chars()
                    .mapToObj(Parser::parseCharToStringBinary7)
                    .forEach(binary7sList::add);
            return binary7sList;
        }

        private static String parseCharToStringBinary7(int ch) {
            String bin = Integer.toBinaryString(ch); // change one int-char into binary written as String
            final int length = bin.length(); // bin can be too short; representation is to have 7 characters (0-1)
            final int lenDif = 7 - length;
            if (lenDif > 0) {
                bin = String.format("%s%s", "0".repeat(lenDif), bin); // I complete too short representation with zeroes at the beginning
            }
            return bin;
        }

        private static String parseBinariesToChuckBlock(String binaries7) {
            final StringBuilder sb = new StringBuilder();
            final int len = binaries7.length();
            int move;
            for (int i = 0; i < len; i += move) {
                if (binaries7.charAt(i) == '1') {
                    sb.append("0 ");
                    final int onesNumber = countSameSignsAndAddZeroes(sb, binaries7, '1', i, len);
                    sb.append(" ");
                    move = onesNumber;
                } else {
                    sb.append("00 ");
                    final int zeroesNumber = countSameSignsAndAddZeroes(sb, binaries7, '0', i, len);
                    sb.append(" ");
                    move = zeroesNumber;
                }
            }
            sb.deleteCharAt(sb.length() - 1);
            return sb.toString();
        }

        private static int countSameSignsAndAddZeroes(StringBuilder sb, String binaries7, char ch, int i, int len) {
            int counter = 1;
            for (int j = i + 1; j < len; j++) {
                if (binaries7.charAt(j) == ch) {
                    counter++;
                } else {
                    break;
                }
            }
            sb.append("0".repeat(counter));
            return counter;
        }
    }
  learner_created: true
- name: src/chucknorris/DigitBlock.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/23027#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 29 Aug 2023 18:18:53 UTC"
record: 4
