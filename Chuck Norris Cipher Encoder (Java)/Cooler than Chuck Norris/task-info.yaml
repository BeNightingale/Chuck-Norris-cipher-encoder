type: edu
files:
- name: src/chucknorris/Main.java
  visible: true
  text: |-
    package chucknorris;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ChuckNorrisTest.java
  visible: false
  text: |-
    import org.assertj.swing.util.Pair;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    public class ChuckNorrisTest extends StageTest {

      @DynamicTest()
      CheckResult test() {
        TestedProgram pr = new TestedProgram();
        String output = pr.start().strip();
        List<String> list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));

        if(list.size()!=1 || !list.get(0).contains("Please input operation (encode/decode/exit):")){
          return CheckResult.wrong("When the program just started, output should contain exactly 1 non-empty line, " +
                  "containing \"Please input operation (encode/decode/exit):\" as it shown in the example, followed by an input");
        }

        output = pr.execute("encode").strip().toLowerCase();
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=1 || !list.get(0).contains("input string")){
          return CheckResult.wrong("When the user has chosen \"encode\" as an operation, there should be printed exactly 1 " +
                  "non-empty line, containing \"input string\" substring, followed by an input");
        }
        output = pr.execute("H W!").strip().toLowerCase();
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=3 || !list.get(0).contains("encoded string") ||
                !list.get(2).contains("please input operation (encode/decode/exit):")){
          return CheckResult.wrong("When the user provided a string for encoding, there should be printed exactly 3 " +
                  "non-empty lines, the first one with \"encoded string\" substring, the second one, with an encoded string," +
                  "and the last one is \"Please input operation (encode/decode/exit):\" as an operation is finished and" +
                  "the program is looped");
        }
        if(!list.get(1).contains("0 0 00 00 0 0 00 0000 0 0 00 00000 0 0 00 0 0 0 00 0 0 000 00 0 0 0 00 0000 0 0")){
          return CheckResult.wrong("When the user provided a string for encoding, the second non-empty " +
                  "line of an output should contain an encoded string. Make sure, that encryption is correct and the " +
                  "encoding of a single character sequence is not separated.");
        }

        output = pr.execute("decode").strip().toLowerCase();
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=1 || !list.get(0).contains("encoded string")){
          return CheckResult.wrong("When the user has chosen \"decode\" as an operation, there should be printed exactly 1 " +
                  "non-empty line, containing \"encoded string\" substring, followed by an input");
        }
        output = pr.execute("0 0 00 00 0 0 00 0000 0 0 00 00000 0 0 00 0 0 0 00 0 0 000 00 0 0 0 00 0000 0 0").strip().toLowerCase();
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=3 || !list.get(0).contains("decoded string") ||
                !list.get(2).contains("please input operation (encode/decode/exit):")){
          return CheckResult.wrong("When the user provided a string for decoding, there should be printed exactly 3 " +
                  "non-empty lines, the first one with \"decoded string\" substring, the second one, with a decoded string," +
                  "and the last one is \"Please input operation (encode/decode/exit):\" as an operation is finished and" +
                  "the program is looped");
        }
        if(!list.get(1).contains("h w!")){
          return CheckResult.wrong("When the user provided a string for decoding, the second non-empty " +
                  "line of an output should contain a decoded string. Make sure, that decryption is correct.");
        }

        output = pr.execute("Hello world!").strip();
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=2 || !list.get(0).contains("There is no 'Hello world!' operation") ||
                !list.get(1).contains("Please input operation (encode/decode/exit):")){
            return CheckResult.wrong("When the user had chosen an operation, that is not \"decode\", \"encode\" or \"exit\"," +
                    " there should be printed exactly 2 non-empty lines, the one that contains " +
                    "\"There is no '<user's input>' operation\" substring, and the \"Please input operation" +
                    " (encode/decode/exit):\" one as the program is looped");
        }
        for(String s : new String[]{"hello world!",
                "0 0 00 00 0 0 00 0000 0 0 00 0 0 00 0 0 0 00 0 0 000 00 0 0 0 00 0000 0 0",
                "0 0 00 00 0 0 00 000 0 0 00 0000 0 0 00 0 0 0 00 0 0 000 00 0 0 0 00 0000 0 0",
                "0 0 00 00 0 0 000 000"}) {
          pr.execute("decode");
          output = pr.execute(s).strip().toLowerCase();
          list = new ArrayList<>(Arrays.asList(output.split("\n")));
          list.removeAll(Arrays.asList(""));
          if (list.size() != 2 || !list.get(0).contains("not valid") ||
                  !list.get(1).contains("please input operation (encode/decode/exit):")) {
            return CheckResult.wrong("When the user provided not valid encoded string, there should be printed exactly 2 " +
                    "non-empty lines, the one that contains \"not valid\" substring, and the \"Please input " +
                    "operation (encode/decode/exit):\" one as an operation is finished and the program is looped");
          }
        }
        output = pr.execute("exit").strip().toLowerCase();
        if(!output.contains("bye") || !pr.isFinished()){
          return CheckResult.wrong("When the user has chosen \"exit\" as an operation, there should be \"Bye\" substring" +
                  " in output and the program should finish it's execution");
        }
        return CheckResult.correct();
      }
    }
  learner_created: false
- name: src/chucknorris/DigitBlock.java
  visible: true
  text: |-
    package chucknorris;

    public class DigitBlock {
        private final String digit;
        public final int digitsCount;

        public DigitBlock(String digit, int digitsCount) {
            this.digit = digit;
            this.digitsCount = digitsCount;
        }

        public String getDigit() {
            return digit;
        }
    }
  learner_created: true
- name: src/chucknorris/Parser.java
  visible: true
  text: |-
    package chucknorris;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.IntStream;

    public class Parser {

        private Parser() {
            // do nothing
        }

        /**
         * Method converts a String object into a list - its elements are chars of input converted to binary
         * and completed with zeroes at the beginning when representation is too short (has less than 7 characters).
         * This list is concatenated into one String object which is later encrypted: converted into zeroes and spaces.
         *
         * @param input a String which user wants to encrypt
         * @return encrypted String
         */
        public static String encryptWithChuckNorrisCipher(String input) {
            final List<String> binary7sList = convertStringIntoBinary7sList(input);
            final String binariesConcatenated = String.join("", binary7sList);
            return parseBinariesToChuckBlock(binariesConcatenated);
        }

        public static String decryptChuckNorrisCipher(String encryptedMessage) {
            final List<DigitBlock> digitBlocksList = parseEncryptedMessageToDigitBlocksList(encryptedMessage);
            final StringBuilder sb = new StringBuilder();
            digitBlocksList.forEach(db -> sb.append(db.getDigit().repeat(db.digitsCount)));
            // pociąć na siódemki
            final List<String> sevens = new ArrayList<>();//znaki w systemie dwójkowym
            for (int i = 0; i < sb.length(); i += 7) {
                sevens.add(sb.substring(i, i + 7));
            }
            return parseBinarySevensListToStringMessage(sevens);
        }

        private static List<String> convertStringIntoBinary7sList(String input) {
            final List<String> binary7sList = new ArrayList<>();
            input.chars()
                    .mapToObj(Parser::parseCharToStringBinary7)
                    .forEach(binary7sList::add);
            return binary7sList;
        }

        private static String parseCharToStringBinary7(int ch) {
            String bin = Integer.toBinaryString(ch); // change one int-char into binary written as String
            final int length = bin.length(); // bin can be too short; representation is to have 7 characters (0-1)
            final int lenDif = 7 - length;
            if (lenDif > 0) {
                bin = String.format("%s%s", "0".repeat(lenDif), bin); // I complete too short representation with zeroes at the beginning
            }
            return bin;
        }

        private static String parseBinariesToChuckBlock(String binaries7) {
            final StringBuilder sb = new StringBuilder();
            final int len = binaries7.length();
            int move;
            for (int i = 0; i < len; i += move) {
                if (binaries7.charAt(i) == '1') {
                    sb.append("0 ");
                    final int onesNumber = countSameSignsAndAddZeroes(sb, binaries7, '1', i, len);
                    sb.append(" ");
                    move = onesNumber;
                } else {
                    sb.append("00 ");
                    final int zeroesNumber = countSameSignsAndAddZeroes(sb, binaries7, '0', i, len);
                    sb.append(" ");
                    move = zeroesNumber;
                }
            }
            sb.deleteCharAt(sb.length() - 1);
            return sb.toString();
        }

        private static int countSameSignsAndAddZeroes(StringBuilder sb, String binaries7, char ch, int i, int len) {
            int counter = 1;
            for (int j = i + 1; j < len; j++) {
                if (binaries7.charAt(j) == ch) {
                    counter++;
                } else {
                    break;
                }
            }
            sb.append("0".repeat(counter));
            return counter;
        }

        private static List<DigitBlock> parseEncryptedMessageToDigitBlocksList(String encryptedMessage) {
            final String[] blocks = encryptedMessage.split(" ");
            final List<DigitBlock> digitBlocksList = new ArrayList<>();
            for (int i = 0; i < blocks.length; i += 2) {
                digitBlocksList.add(
                        new DigitBlock(
                                "0".equals(blocks[i]) ? "1" : "0",
                                blocks[i + 1].length())
                );
            }
            return digitBlocksList;
        }

        private static String parseBinarySevensListToStringMessage(List<String> sevens) {
            StringBuilder sb = new StringBuilder();
            sevens.stream()
                    .map(sev -> {
                                final String[] digitsArray = sev.split("");
                                final int len = digitsArray.length;
                                final List<Integer> intValues = new ArrayList<>();
                                IntStream.rangeClosed(0, 6)
                                        .forEach(i -> intValues.add(Integer.parseInt(digitsArray[len - i - 1]) * powerOfNumTwo(i)));
                                return intValues.stream().mapToInt(d -> d).sum();
                            }
                    )
                    .mapToInt(i -> i)
                    .mapToObj(i -> (char) i)
                    .forEach(sb::append);
            return sb.toString();
        }

        // only for i >= 0
        private static int powerOfNumTwo(int n) {
            if (n == 0)
                return 1;
            if (n < 0)
                throw new RuntimeException("Exponent cannot be negative");
            return 2 * powerOfNumTwo(n - 1);
        }
    }
  learner_created: true
- name: src/chucknorris/OperationManager.java
  visible: true
  text: |-
    package chucknorris;

    import java.util.Scanner;

    public class IOUtil {

        private IOUtil() {
            // nothing
        }

        public static String scanInputToEncrypt() {
            System.out.println("Input string:");
            Scanner scanner = new Scanner(System.in);
            return scanner.nextLine();
        }

        public static String showEncryptedResult(String userInput) {
            System.out.println("The result:");
            final String encryptedMessage = Parser.encryptWithChuckNorrisCipher(userInput);
            System.out.println(encryptedMessage);
            return encryptedMessage;
        }

        public static String scanEncodedInput() {
            System.out.println("Input encoded string:");
            Scanner scanner = new Scanner(System.in);
            return scanner.nextLine();
        }

        public static void showDecryptedMessage(String encryptedMessage) {
            System.out.println("The result:");
            System.out.println(Parser.decryptChuckNorrisCipher(encryptedMessage));
        }
    }
  learner_created: true
- name: src/chucknorris/EncodedFormatException.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/23028#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Fri, 01 Sep 2023 18:48:21 UTC"
record: -1
